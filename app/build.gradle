apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.cy.cblog"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        ndk {
//            abiFilters "armeabi" , "x86" //选择要使用的平台
//        }
        resConfigs "zh", "zh-rCN"
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keyStore/cyongs.jks")
                storePassword project.property('storePassword')
                keyAlias project.property('keyAlias')
                keyPassword project.property('keyPassword')
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            try {
                storeFile file("./keyStore/cyongs.jks")
                storePassword project.property('storePassword')
                keyAlias project.property('keyAlias')
                keyPassword project.property('keyPassword')
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    buildTypes {
        release {
            // 是否进行混淆
            minifyEnabled true
            // 开启zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true
            // 移除无用的resource文件
            // 需要注意的是目前资源压缩器目前不会移除values/文件夹中定义的资源（例如字符串、尺寸、样式和颜色）
            shrinkResources true
            // 混淆文件的位置，其中 proguard-android.txt 为sdk默认的混淆配置，
            // 它的位置位于android-sdk/tools/proguard/proguard-android.txt，
            // 此外，proguard-android-optimize.txt 也为sdk默认的混淆配置，
            // 但是它默认打开了优化开关，我们可在配置混淆文件将android.util.Log置为无效代码，
            // 以去除apk中打印日志的代码。而 proguard-rules.pro 是该模块下的混淆配置。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //配置签名文件
            signingConfig signingConfigs.release
        }

        debug{

        }
    }
    buildFeatures{
//        dataBinding = true//开启数据绑定
        viewBinding = true//开启视图绑定
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions{
        jvmTarget = "1.8"
    }

}

def implementationDependencies = rootProject.ext.dependencies
def androidTestImplementationDependencies = rootProject.ext.androidTestImplementationDependencies
def testImplementationDependencies = rootProject.ext.testImplementationDependencies
def processors = rootProject.ext.annotationProcessor
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //处理所有implementation依赖
    implementationDependencies.each{ k,v -> implementation v }

    androidTestImplementationDependencies.each { k, v -> androidTestImplementation v }
    testImplementationDependencies.each { k, v -> testImplementation v }

    // 处理 annotationProcessor 依赖
    processors.each { k, v -> annotationProcessor v }
}

/**
 * getAllProjects 使用示例
 */
this.getProjects()
def getProjects(){
    println '################################'
    println '#   Root Project Start         #'
    println '################################'
    //1、getAllprojects 方法返回一个包含根 project 与其子 project 的 set 集合
    //eachWithIndex 方法用于遍历集合、数组等可迭代容器，
    //并同时返回下标，不同于 each 方法仅返回 project
    this.getAllprojects().eachWithIndex{  entry, int index ->
        //2、下标为0，表明当前遍历的是 rootProject
        if(index == 0){
            println "Root Project is $entry"
        }else{
            println "Child Project is $entry"
        }
    }
}

/**
 * getAllsubproject示例
 */
this.getSubProjects()
def getSubProjects(){

    println '################################'
    println '#   Sub Project Start          #'
    println '################################'
    //
    this.getSubprojects().each {Project project ->
        println "child Project is $project"
    }
}
